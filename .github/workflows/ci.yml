name: CI
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  build-subalfred:
    name: Build subalfred
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust nightly-2021-04-22 toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-04-22
          default: true
      - name: Install sccache
        env:
          SCCACHE_VERSION: v0.2.15
          SCCACHE_GCS_KEY: ${{ secrets.SCCACHE_GCS_KEY }}
        run: |
          export SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          curl -L https://github.com/mozilla/sccache/releases/download/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz | tar xz
          sudo mv -f $SCCACHE_FILE/sccache /usr/bin/sccache
          sudo chmod +x /usr/bin/sccache
          echo $SCCACHE_GCS_KEY > ~/.gcs
      - name: Fetch latest code
        uses: actions/checkout@v2
        with:
          repository: l2ust/subalfred
          ref: main
      - name: Build
        env:
          SCCACHE_GCS_RW_MODE: READ_WRITE
          SCCACHE_GCS_BUCKET: darwinia-build-cache
          SCCACHE_GCS_KEY_PATH: /home/runner/.gsc
          RUSTC_WRAPPER: sccache
        # uses: actions-rs/cargo@v1
        # with:
        #   command: build
        #   args: --release
        run: |
          cat $SCCACHE_GCS_KEY_PATH
          sccache --show-stats
          cargo b --release
          sccache --show-stats
      - name: Compress subalfred
        run: cp target/release/subalfred . && tar cf subalfred.tar.zst subalfred -I pzstd
      - name: Upload subalfred
        uses: actions/upload-artifact@v2
        with:
          name: subalfred
          path: subalfred.tar.zst

  check-rust-code:
    name: Check Rust code
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust nightly-2021-04-22 toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-04-22
          target: wasm32-unknown-unknown
          default: true
      - name: Install sccache
        env:
          SCCACHE_VERSION: v0.2.15
          SCCACHE_GCS_KEY: ${{ secrets.SCCACHE_GCS_KEY }}
        run: |
          export SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          curl -L https://github.com/mozilla/sccache/releases/download/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz | tar xz
          sudo mv -f $SCCACHE_FILE/sccache /usr/bin/sccache
          sudo chmod +x /usr/bin/sccache
          echo "$SCCACHE_GCS_KEY" > ~/.gsc
      - name: Fetch latest code
        uses: actions/checkout@v2
      - name: Run checker
        env:
          SCCACHE_GCS_RW_MODE: READ_WRITE
          SCCACHE_GCS_BUCKET: darwinia-build-cache
          SCCACHE_GCS_KEY_PATH: ~/.gsc
          RUSTC_WRAPPER: sccache
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked

  build-node-and-internal-test:
    name: Build node and internal test
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust nightly-2021-04-22 toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-04-22
          target: wasm32-unknown-unknown
          default: true
      - name: Install sccache
        env:
          SCCACHE_VERSION: v0.2.15
          SCCACHE_GCS_KEY: ${{ secrets.SCCACHE_GCS_KEY }}
        run: |
          export SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          curl -L https://github.com/mozilla/sccache/releases/download/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz | tar xz
          sudo mv -f $SCCACHE_FILE/sccache /usr/bin/sccache
          sudo chmod +x /usr/bin/sccache
          echo "$SCCACHE_GCS_KEY" > ~/.gsc
      - name: Fetch latest code
        uses: actions/checkout@v2
      - name: Build
        env:
          SCCACHE_GCS_RW_MODE: READ_WRITE
          SCCACHE_GCS_BUCKET: darwinia-build-cache
          SCCACHE_GCS_KEY_PATH: ~/.gsc
          RUSTC_WRAPPER: sccache
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked
      - name: Test
        env:
          SCCACHE_GCS_RW_MODE: READ_WRITE
          SCCACHE_GCS_BUCKET: darwinia-build-cache
          SCCACHE_GCS_KEY_PATH: ~/.gsc
          RUSTC_WRAPPER: sccache
          CARGO_INCREMENTAL: 0
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --all --locked
      - name: Compress node
        run: cp target/release/drml . && tar cf node.tar.zst drml -I pzstd
      - name: Upload node
        uses: actions/upload-artifact@v2
        with:
          name: node
          path: node.tar.zst

  check-default-features:
    name: Check default features
    needs: [build-subalfred]
    runs-on: ubuntu-latest
    steps:
      - name: Download subalfred
        uses: actions/download-artifact@v2
        with:
          name: subalfred
      - name: Uncompress subalfred
        run: tar xf subalfred.tar.zst -I pzstd
      - name: Fetch latest code
        uses: actions/checkout@v2
      - name: Run checker
        run: ./subalfred ci default-features -p ../darwinia-common

  check-with-node:
    name: Check with node
    needs: [build-subalfred, build-node-and-internal-test]
    runs-on: ubuntu-latest
    steps:
      - name: Download subalfred
        uses: actions/download-artifact@v2
        with:
          name: subalfred
      - name: Download node
        uses: actions/download-artifact@v2
        with:
          name: node
      - name: Uncompress subalfred and node
        run: tar xf subalfred.tar.zst -I pzstd && tar xf node.tar.zst -I pzstd
      - id: check-pangolin-runtime-version
        name: Check Pangolin runtime version
        run: |
          OUTPUT=$(./subalfred ci runtime-version -c Pangolin -e ./drml)
          OUTPUT="${OUTPUT//'%'/'%25'}​"
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"
          echo "::set-output name=check-pangolin-runtime-version::$OUTPUT"
      - id: check-pangolin-storage-prefix
        name: Check Pangolin storage prefix
        run: |
          OUTPUT=$(./subalfred ci storage-prefix -c Pangolin -e ./drml)
          OUTPUT="${OUTPUT//'%'/'%25'}​"
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"
          echo "::set-output name=check-pangolin-storage-prefix::$OUTPUT"
      - id: check-pangoro-runtime-version
        name: Check Pangoro runtime version
        run: |
          OUTPUT=$(./subalfred ci runtime-version -c Pangoro -e ./drml)
          OUTPUT="${OUTPUT//'%'/'%25'}​"
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"
          echo "::set-output name=check-pangoro-runtime-version::$OUTPUT"
      - id: check-pangoro-storage-prefix
        name: Check Pangoro storage prefix
        run: |
          OUTPUT=$(./subalfred ci storage-prefix -c Pangoro -e ./drml)
          OUTPUT="${OUTPUT//'%'/'%25'}​"
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"
          echo "::set-output name=check-pangoro-storage-prefix::$OUTPUT"
      - if: github.ref != 'refs/heads/master'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          append: true
          message: |
            ---
            ## SHA ${{ github.event.pull_request.head.sha }}
            ### Pangolin
            #### Check Runtime Version
            ```diff
            ${{ steps.check-pangolin-runtime-version.outputs.check-pangolin-runtime-version }}
            ```
            #### Check Storage Prefix
            ```diff
            ${{ steps.check-pangolin-storage-prefix.outputs.check-pangolin-storage-prefix }}
            ```
            ### Pangoro
            #### Check Runtime Version
            ```diff
            ${{ steps.check-pangoro-runtime-version.outputs.check-pangoro-runtime-version }}
            ```
            #### Check Storage Prefix
            ```diff
            ${{ steps.check-pangoro-storage-prefix.outputs.check-pangoro-storage-prefix }}
            ```

  external-test:
    name: External test
    needs: [build-node-and-internal-test]
    runs-on: ubuntu-latest
    steps:
      - name: Download node
        uses: actions/download-artifact@v2
        with:
          name: node
      - name: Uncompress subalfred and node
        run: tar xf node.tar.zst -I pzstd
      - name: Launch node
        run: ./drml --dev --tmp &
      - name: Install nodejs 10
        uses: actions/setup-node@v1
        with:
          node-version: 10
      - name: Fetch latest code
        uses: actions/checkout@v2
      - name: DVM test
        run: cd tests/dvm && npm install && npm test

  clean-artifacts:
    name: Clean artifacts
    needs: [check-default-features, check-with-node, external-test]
    if: always()
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            subalfred
            node
    runs-on: ubuntu-latest
