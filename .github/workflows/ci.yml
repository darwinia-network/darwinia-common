name: Checks
on:
  push:
    branches:
      - main
      - master
    paths:
      - "**.rs"
      - "**.toml"
      - "**lock"
      - "**.json"
      - "**.yml"
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches:
      - main
      - master
    paths:
      - "**.rs"
      - "**.toml"
      - "**lock"
      - "**.json"
      - "**.yml"
  # issue_comment:
  #   types: [created, edited]

env:
  RUST_TOOLCHAIN: nightly
  RUST_BACKTRACE: full
  NODE_VERSION: 10
  GITHUB_CACHE_VERSION: 0

jobs:
  basic-checks:
    name: Task ${{ matrix.action }} ${{ matrix.task.target }}
    if: github.event_name == 'push' || !github.event.pull_request.draft
    runs-on: ubuntu-latest
    strategy:
      matrix:
        action: [build, test]
        task:
          - target: drml
            repository: darwinia-network/darwinia-common
          - target: subalfred
            repository: l2ust/subalfred
        exclude:
          - action: test
            task:
              target: subalfred

    steps:
      - name: Install Rust ${{ env.RUST_TOOLCHAIN }}  toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          default: true

      - name: Fetch latest code
        uses: actions/checkout@v2
        with:
          repository: ${{ matrix.task.repository }}

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            !target/debug/${{ matrix.task.target }}
            target
          key: ${{ matrix.action }}-${{ matrix.task.target }}-${{ env.GITHUB_CACHE_VERSION }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.action }}-${{ matrix.task.target }}-${{ env.GITHUB_CACHE_VERSION }}-

      - name: Action ${{ matrix.action }}
        run: |
          cargo ${{ matrix.action }} --locked
          cd target/debug

      - name: Upload ${{ matrix.task.target }}
        if: matrix.action != 'test'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.task.target }}
          path: ${{ matrix.task.target }}

  rpc-checks:
    name: RPC tests
    if: github.event_name == 'push' || !github.event.pull_request.draft
    needs: [basic-checks]
    runs-on: ubuntu-latest
    steps:
      - name: Download drml
        uses: actions/download-artifact@v2
        with:
          name: drml

      - name: Launch drml
        run: |
          ./drml --unsafe-ws-external --unsafe-rpc-external --rpc-cors all --rpc-methods unsafe --chain pangolin-dev --alice &
          sleep 120

      - name: Install nodejs ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Fetch latest code
        uses: actions/checkout@v2

      - name: Test
        run: |
          pwd
          ls -al
          cd tests/dvm
          npm install
          npm test

  code-checks:
    name: Code checks
    if: github.event_name == 'push' || !github.event.pull_request.draft
    # if: github.event.issue.pull_request && contains(github.event.comment.body, '/bot check') && contains(github.event.comment.body, 'code')
    needs: [basic-checks]
    runs-on: ubuntu-latest
    steps:
      - name: Download subalfred
        uses: actions/download-artifact@v2
        with:
          name: subalfred

      - name: Fetch latest code
        uses: actions/checkout@v2

      - name: Run checker
        run: ./subalfred ci default-features -p ../darwinia-common

  runtime-checks:
    name: Runtime checks
    if: github.event_name == 'push' || !github.event.pull_request.draft
    # if: github.event.issue.pull_request && contains(github.event.comment.body, '/bot check') && contains(github.event.comment.body, 'runtime')
    needs: [basic-checks]
    runs-on: ubuntu-latest
    steps:
      - name: Download drml
        uses: actions/download-artifact@v2
        with:
          name: drml

      - name: Download subalfred
        uses: actions/download-artifact@v2
        with:
          name: subalfred

      - id: check-pangolin-runtime-version
        name: Check Pangolin runtime version
        run: |
          OUTPUT=$(./subalfred ci runtime-version -c Pangolin -e drml)
          OUTPUT="${OUTPUT//'%'/'%25'}​"
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"
          echo "::set-output name=check-pangolin-runtime-version::$OUTPUT"

      - id: check-pangolin-storage-prefix
        name: Check Pangolin storage prefix
        run: |
          OUTPUT=$(./subalfred ci storage-prefix -c Pangolin -e drml)
          OUTPUT="${OUTPUT//'%'/'%25'}​"
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"
          echo "::set-output name=check-pangolin-storage-prefix::$OUTPUT"

      - id: check-pangoro-runtime-version
        name: Check Pangoro runtime version
        run: |
          OUTPUT=$(./subalfred ci runtime-version -c Pangoro -e drml)
          OUTPUT="${OUTPUT//'%'/'%25'}​"
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"
          echo "::set-output name=check-pangoro-runtime-version::$OUTPUT"

      - id: check-pangoro-storage-prefix
        name: Check Pangoro storage prefix
        run: |
          OUTPUT=$(./subalfred ci storage-prefix -c Pangoro -e drml)
          OUTPUT="${OUTPUT//'%'/'%25'}​"
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"
          echo "::set-output name=check-pangoro-storage-prefix::$OUTPUT"

      - if: github.ref != 'refs/heads/master'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          append: true
          message: |
            <details>
            <summary>Commit ${{ github.event.pull_request.head.sha }}</summary>

            **Pangolin**
            > Check Runtime Version
            ```diff
            ${{ steps.check-pangolin-runtime-version.outputs.check-pangolin-runtime-version }}
            ```
            > Check Storage Prefix
            ```diff
            ${{ steps.check-pangolin-storage-prefix.outputs.check-pangolin-storage-prefix }}
            ```

            **Pangoro**
            > Check Runtime Version
            ```diff
            ${{ steps.check-pangoro-runtime-version.outputs.check-pangoro-runtime-version }}
            ```
            > Check Storage Prefix
            ```diff
            ${{ steps.check-pangoro-storage-prefix.outputs.check-pangoro-storage-prefix }}
            ```
            </details>

  clean-artifacts:
    name: Clean artifacts
    if: always()
    needs: [rpc-checks, code-checks, runtime-checks]
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            drml
            subalfred
    runs-on: ubuntu-latest
