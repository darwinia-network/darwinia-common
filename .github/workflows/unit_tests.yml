name: Unit tests
on:
  push:
    branches:
      - main
      - master
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches:
      - main
      - master

env:
  OS: ubuntu-latest
  RUST_TOOLCHAIN: nightly
  RUST_BACKTRACE: full
  RUSTC_WRAPPER: sccache
  SCCACHE_LINK: https://github.com/mozilla/sccache/releases/download
  SCCACHE_VERSION: v0.2.15
  SCCACHE_DIR: /home/runner/.cache/sccache
  NODE_VERSION: 10

jobs:
  build-subalfred:
    name: Build subalfred
    if: github.event_name == 'push' || !github.event.pull_request.draft
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust ${{ env.RUST_TOOLCHAIN }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          default: true

      - name: Install sccache ${{ env.SCCACHE_VERSION }}
        run: |
          export SCCACHE_FILE=sccache-${{ env.SCCACHE_VERSION }}-x86_64-unknown-linux-musl
          curl -L ${{ env.SCCACHE_LINK }}/${{ env.SCCACHE_VERSION }}/$SCCACHE_FILE.tar.gz | tar xz
          sudo mv -f $SCCACHE_FILE/sccache /usr/bin
          sudo chmod +x /usr/bin/sccache

      - name: Fetch latest code
        uses: actions/checkout@v2
        with:
          repository: l2ust/subalfred
          ref: main

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ env.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ env.OS }}-cargo-

      - name: Save sccache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: ${{ env.OS }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ env.OS }}-sccache-

      - name: Build
        run: cargo b --locked && sccache --show-stats

      - name: Compress subalfred
        run: |
          cp target/debug/subalfred .
          tar cf subalfred.tar.zst subalfred -I pzstd

      - name: Upload subalfred
        uses: actions/upload-artifact@v2
        with:
          name: subalfred
          path: subalfred.tar.zst

  build-node:
    name: Build node
    if: github.event_name == 'push' || !github.event.pull_request.draft
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust ${{ env.RUST_TOOLCHAIN }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          default: true

      - name: Install sccache ${{ env.SCCACHE_VERSION }}
        run: |
          export SCCACHE_FILE=sccache-${{ env.SCCACHE_VERSION }}-x86_64-unknown-linux-musl
          curl -L ${{ env.SCCACHE_LINK }}/${{ env.SCCACHE_VERSION }}/$SCCACHE_FILE.tar.gz | tar xz
          sudo mv -f $SCCACHE_FILE/sccache /usr/bin
          sudo chmod +x /usr/bin/sccache

      - name: Fetch latest code
        uses: actions/checkout@v2

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ env.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ env.OS }}-cargo-

      - name: Save sccache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: ${{ env.OS }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ env.OS }}-sccache-

      - name: Build
        run: cargo b --locked && sccache --show-stats

      - name: Compress node
        run: |
          cp target/debug/drml ./node
          tar cf node.tar.zst node -I pzstd

      - name: Upload node
        uses: actions/upload-artifact@v2
        with:
          name: node
          path: node.tar.zst

  unit-tests:
    name: Unit tests
    if: github.event_name == 'push' || !github.event.pull_request.draft
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust ${{ env.RUST_TOOLCHAIN }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          default: true

      - name: Install sccache ${{ env.SCCACHE_VERSION }}
        run: |
          export SCCACHE_FILE=sccache-${{ env.SCCACHE_VERSION }}-x86_64-unknown-linux-musl
          curl -L ${{ env.SCCACHE_LINK }}/${{ env.SCCACHE_VERSION }}/$SCCACHE_FILE.tar.gz | tar xz
          sudo mv -f $SCCACHE_FILE/sccache /usr/bin
          sudo chmod +x /usr/bin/sccache

      - name: Fetch latest code
        uses: actions/checkout@v2

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ env.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ env.OS }}-cargo-

      - name: Save sccache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: ${{ env.OS }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ env.OS }}-sccache-

      - name: Build
        run: cargo t --locked && sccache --show-stats

  external-test:
    name: External test
    if: github.event_name == 'push' || !github.event.pull_request.draft
    needs: [build-node]
    runs-on: ubuntu-latest
    steps:
      - name: Download node
        uses: actions/download-artifact@v2
        with:
          name: node

      - name: Uncompress node
        run: |
          tar xf node.tar.zst -I pzstd
          sudo mv node /usr/bin

      - name: Launch node
        run: node --unsafe-ws-external --unsafe-rpc-external --rpc-cors all --rpc-methods unsafe --chain pangolin-dev --alice &

      - name: Install nodejs $NODE_VERSION
        uses: actions/setup-node@v1
        with:
          node-version: $NODE_VERSION

      - name: Fetch latest code
        uses: actions/checkout@v2

      - name: DVM test
        run: |
          pwd
          ls -al
          cd tests/dvm
          npm install
          npm test
