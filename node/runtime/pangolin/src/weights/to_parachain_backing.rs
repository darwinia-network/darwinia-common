// This file is part of Darwinia.
//
// Copyright (C) 2018-2022 Darwinia Network
// SPDX-License-Identifier: GPL-3.0
//
// Darwinia is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Darwinia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `to_parachain_backing`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-12, STEPS: `3`, REPEAT: 3, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("pangolin-dev"), DB CACHE: 128

// Executed Command:
// target/release/drml
// benchmark
// --header
// .maintain/lincense-header
// --execution
// wasm
// --heap-pages
// 4096
// --steps
// 3
// --repeat
// 3
// --chain
// pangolin-dev
// --output
// node/runtime/pangolin/src/weights/
// --extrinsic
// *
// --pallet
// *

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `to_parachain_backing`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> to_parachain_backing::WeightInfo for WeightInfo<T> {
	// Storage: System Account (r:2 w:2)
	// Storage: Balances Locks (r:2 w:0)
	// Storage: BridgePangolinParachainMessages PalletOperatingMode (r:1 w:0)
	// Storage: BridgePangolinParachainMessages OutboundLanes (r:1 w:1)
	// Storage: PangolinParachainFeeMarket AssignedRelayers (r:1 w:0)
	// Storage: ToPangolinParachainBacking TransactionInfos (r:1 w:1)
	// Storage: BridgePangolinParachainMessages OutboundMessages (r:0 w:1)
	fn lock_and_remote_issue() -> Weight {
		(107_841_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: ToPangolinParachainBacking RemoteMappingTokenFactoryAccount (r:1 w:0)
	// Storage: ToPangolinParachainBacking SecureLimitedRingAmount (r:1 w:1)
	// Storage: ToPangolinParachainBacking SecureLimitedPeriod (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Balances Locks (r:1 w:0)
	// Storage: BridgePangolinParachainMessages InboundLanes (r:1 w:0)
	fn unlock_from_remote() -> Weight {
		(63_041_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: ToPangolinParachainBacking SecureLimitedPeriod (r:0 w:1)
	fn set_secure_limited_period() -> Weight {
		(1_660_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ToPangolinParachainBacking SecureLimitedRingAmount (r:1 w:1)
	fn set_security_limitation_ring_amount() -> Weight {
		(4_460_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ToPangolinParachainBacking RemoteMappingTokenFactoryAccount (r:0 w:1)
	fn set_remote_mapping_token_factory_account() -> Weight {
		(12_170_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}
