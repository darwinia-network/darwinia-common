// This file is part of Darwinia.
//
// Copyright (C) 2018-2022 Darwinia Network
// SPDX-License-Identifier: GPL-3.0
//
// Darwinia is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Darwinia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for darwinia_evm
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-13, STEPS: `30`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 128

// Executed Command:
// ./target/release/drml
// benchmark
// --dev
// --pallet
// darwinia_evm
// --repeat
// 10
// --steps
// 30
// --extrinsic
// runner_execute
// --output=./frame/dvm/evm/src/weight.rs
// --execution
// wasm
// --template=./.maintain/frame-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for darwinia_evm.
pub trait WeightInfo {
	fn runner_execute(x: u32, ) -> Weight;
}

/// Weights for darwinia_evm using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: System Account (r:1 w:0)
	// Storage: Ethereum RemainingRingBalance (r:1 w:0)
	// Storage: EVM AccountCodes (r:1 w:0)
	// Storage: EVM AccountStorages (r:1 w:0)
	fn runner_execute(x: u32, ) -> Weight {
		(5_773_816_000 as Weight)
			// Standard Error: 0
			.saturating_add((38_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: System Account (r:1 w:0)
	// Storage: Ethereum RemainingRingBalance (r:1 w:0)
	// Storage: EVM AccountCodes (r:1 w:0)
	// Storage: EVM AccountStorages (r:1 w:0)
	fn runner_execute(x: u32, ) -> Weight {
		(5_773_816_000 as Weight)
			// Standard Error: 0
			.saturating_add((38_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
