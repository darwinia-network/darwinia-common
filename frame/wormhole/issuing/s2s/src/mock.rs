// This file is part of Darwinia.
//
// Copyright (C) 2018-2022 Darwinia Network
// SPDX-License-Identifier: GPL-3.0
//
// Darwinia is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Darwinia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.

// --- std ---
use std::str::FromStr;
// --- crates.io ---
use codec::{Decode, Encode, MaxEncodedLen};
use ethereum::{TransactionAction, TransactionSignature};
use rlp::RlpStream;
use scale_info::TypeInfo;
use sha3::{Digest, Keccak256};
// --- paritytech ---
use fp_evm::{Context, Precompile, PrecompileResult, PrecompileSet};
use frame_support::{
	traits::{Everything, GenesisBuild},
	PalletId,
};
use frame_system::mocking::*;
use pallet_evm::FeeCalculator;
use pallet_evm_precompile_simple::{ECRecover, Identity, Ripemd160, Sha256};
use sp_runtime::{
	testing::Header,
	traits::{BlakeTwo256, IdentityLookup},
	AccountId32, RuntimeDebug,
};
// --- darwinia-network ---
use crate::{
	*, {self as s2s_issuing},
};
use darwinia_ethereum::{
	account_basic::{DvmAccountBasic, KtonRemainBalance, RingRemainBalance},
	IntermediateStateRoot, RawOrigin, Transaction,
};
use darwinia_evm::{EVMCurrencyAdapter, EnsureAddressTruncated, SubstrateBlockHashMapping};
use darwinia_evm_precompile_bridge_s2s::Sub2SubBridge;
use darwinia_evm_precompile_dispatch::Dispatch;
use darwinia_support::{
	evm::IntoAccountId,
	s2s::{LatestMessageNoncer, RelayMessageSender},
};

type Block = MockBlock<Test>;
type SignedExtra = (frame_system::CheckSpecVersion<Test>,);
type UncheckedExtrinsic = frame_system::mocking::MockUncheckedExtrinsic<Test, (), SignedExtra>;
type Balance = u64;

pub const TEST_CONTRACT_BYTECODE: &str = "608060405234801561001057600080fd5b50613ed1806100206000396000f3fe6080604052600436106200023f5760003560e01c80638129fc1c116200012f578063d4e373de11620000ad578063ecd22a191162000078578063ecd22a1914620007ac578063ef13ef4d14620007d1578063f2fde38b14620007f6578063f3f51415146200081b578063f3fc4c29146200084c57600080fd5b8063d4e373de1462000726578063de66341e146200074b578063de87a30a1462000762578063eb6325ee146200078757600080fd5b80638da5cb5b11620000fa5780638da5cb5b14620006475780639e71fe77146200066d578063c0948c8814620006a7578063c483228914620006dc578063c8ff0854146200070157600080fd5b80638129fc1c14620005c157806381c5e03b14620005d95780638456cb5914620005fe5780638aeac501146200061657600080fd5b80634e6fd6c411620001bd5780636d66651611620001885780636d66651614620004a2578063715018a61462000522578063739d40d9146200053a5780637ef5e480146200055f57806380b60844146200058457600080fd5b80634e6fd6c4146200041b578063529124cb14620004335780635c975abb146200045857806365620a2a146200047d57600080fd5b80632803212f116200020a5780632803212f14620003715780633c547e1614620003965780633f4ba83a14620003bb578063494f977114620003d35780634dea080a14620003ea57600080fd5b80630c90193d146200024c578063148a79fd1462000265578063224da62a14620002bc578063250540cf146200033d57600080fd5b366200024757005b600080fd5b620002636200025d36600462002762565b62000863565b005b3480156200027257600080fd5b506200029f62000284366004620027e4565b6006602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b348015620002c957600080fd5b5062000310620002db366004620027fe565b6007602052600090815260409020805460019091015463ffffffff8216916001600160a01b03600160201b9091048116911683565b6040805163ffffffff90941684526001600160a01b039283166020850152911690820152606001620002b3565b3480156200034a57600080fd5b50620003626200035c366004620027fe565b62000dde565b604051908152602001620002b3565b3480156200037e57600080fd5b50620002636200039036600462002823565b62000e95565b348015620003a357600080fd5b5062000263620003b536600462002850565b62000eea565b348015620003c857600080fd5b506200026362000f8c565b348015620003e057600080fd5b506200029f601881565b348015620003f757600080fd5b506200036262000409366004620027fe565b60026020526000908152604090205481565b3480156200042857600080fd5b506200029f61dead81565b3480156200044057600080fd5b50620002636200045236600462002888565b62000fcc565b3480156200046557600080fd5b5060045460ff166040519015158152602001620002b3565b3480156200048a57600080fd5b50620002636200049c366004620028a7565b62001061565b348015620004af57600080fd5b50620004fb620004c136600462002904565b8051808201602090810180516009825292820191909301209152805460018201546002909201546001600160a01b03918216929091169083565b604080516001600160a01b03948516815293909216602084015290820152606001620002b3565b3480156200052f57600080fd5b506200026362001247565b3480156200054757600080fd5b506200029f6b06d6f646c6461722f64766d760441b81565b3480156200056c57600080fd5b50620002636200057e3660046200296c565b620012cc565b3480156200059157600080fd5b50600a54620005a790600160201b900460e01b81565b6040516001600160e01b03199091168152602001620002b3565b348015620005ce57600080fd5b50620002636200160c565b348015620005e657600080fd5b5062000263620005f836600462002823565b620016ce565b3480156200060b57600080fd5b50620002636200170e565b3480156200062357600080fd5b506200036262000635366004620027fe565b60036020526000908152604090205481565b3480156200065457600080fd5b506000546201000090046001600160a01b03166200029f565b3480156200067a57600080fd5b506200029f6200068c366004620029bc565b6008602052600090815260409020546001600160a01b031681565b348015620006b457600080fd5b50600a54620006c69063ffffffff1681565b60405163ffffffff9091168152602001620002b3565b348015620006e957600080fd5b5062000263620006fb366004620029da565b6200174c565b3480156200070e57600080fd5b506200026362000720366004620029f8565b620017a5565b3480156200073357600080fd5b506200026362000745366004620029bc565b620018bf565b3480156200075857600080fd5b5060055462000362565b3480156200076f57600080fd5b50620002636200078136600462002a39565b6200190f565b3480156200079457600080fd5b506200029f620007a6366004620027e4565b62001bab565b348015620007b957600080fd5b506200029f620007cb36600462002888565b62001bd6565b348015620007de57600080fd5b506200029f620007f036600462002a8b565b62001c24565b3480156200080357600080fd5b506200026362000815366004620027fe565b6200205e565b3480156200082857600080fd5b50620003626200083a366004620027fe565b60016020526000908152604090205481565b3480156200085957600080fd5b506200029f601981565b60045460ff1615620008925760405162461bcd60e51b8152600401620008899062002b45565b60405180910390fd5b60008111620008e45760405162461bcd60e51b815260206004820152601c60248201527f63616e206e6f74207472616e7366657220616d6f756e74207a65726f00000000604482015260640162000889565b6001600160a01b038084166000908152600760209081526040918290208251606081018452815463ffffffff81168252600160201b9004851692810192909252600101549092169082018190526200097f5760405162461bcd60e51b815260206004820152601f60248201527f746f6b656e206973206e6f74206372656174656420627920666163746f727900604482015260640162000889565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038516906323b872dd906064016020604051808303816000875af1158015620009d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009f9919062002b6f565b62000a3f5760405162461bcd60e51b81526020600482015260156024820152741d1c985b9cd9995c881d1bdad95b8819985a5b1959605a1b604482015260640162000889565b8051604080830151905163777c90c960e11b815260009260189263eef921929262000a75928c928c928b908b9060040162002bf0565b600060405180830381865afa15801562000a93573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000abd919081019062002c4c565b9050600062000ad1633b9aca003462002ce1565b600a546040516303ae9ef160e61b815291925060009160189163eba7bc409162000b169163ffffffff811691600160201b90910460e01b908890889060040162002d04565b600060405180830381865afa15801562000b34573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000b5e919081019062002c4c565b9050600060196001600160a01b03168260405162000b7d919062002d45565b6000604051808303816000865af19150503d806000811462000bbc576040519150601f19603f3d011682016040523d82523d6000602084013e62000bc1565b606091505b505090508062000c145760405162461bcd60e51b815260206004820181905260248201527f6275726e3a2073656e6420756e6c6f636b206d657373616765206661696c6564604482015260640162000889565b600a54604051632ed932bf60e01b8152600160201b90910460e01b6001600160e01b0319166004820152600090601890632ed932bf90602401602060405180830381865afa15801562000c6b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c91919062002d63565b600a5460408051600160201b90920460e01b6001600160e01b03191660208301526001600160401b0383169082015290915060009060600160408051601f198184030181526060830182523383526001600160a01b038d1660208401528282018b9052905190925060099062000d0990849062002d45565b908152602001604051809103902060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201559050507f6441634456c3fd4731afa0964b88d8d087d5562485b5effa763df105ce570d7d600a60049054906101000a900460e01b83338c8e8d60405162000dc89695949392919062002d83565b60405180910390a1505050505050505050505050565b6001600160a01b03811660009081526002602052604081205462000e06906201518062002dde565b42111562000e2a57506001600160a01b031660009081526001602052604090205490565b6001600160a01b038216600090815260036020908152604080832054600190925290912054101562000e5e57506000919050565b6001600160a01b03821660009081526003602090815260408083205460019092529091205462000e8f919062002df9565b92915050565b6000546001600160a01b036201000090910416331462000ec95760405162461bcd60e51b8152600401620008899062002e13565b6001600160a01b0391909116600090815260016020526040902055565b5050565b6000546001600160a01b036201000090910416331462000f1e5760405162461bcd60e51b8152600401620008899062002e13565b63ffffffff821660008181526008602090815260409182902080546001600160a01b0319166001600160a01b0386169081179091558251938452908301527f8e5dcd84c10590a91ea9ae27235bb89747915592aca6dea8c6fca10d053e3c9491015b60405180910390a15050565b6000546001600160a01b036201000090910416331462000fc05760405162461bcd60e51b8152600401620008899062002e13565b62000fca62002162565b565b6000546001600160a01b0362010000909104163314620010005760405162461bcd60e51b8152600401620008899062002e13565b60405163f2fde38b60e01b81526001600160a01b03828116600483015283169063f2fde38b90602401600060405180830381600087803b1580156200104457600080fd5b505af115801562001059573d6000803e3d6000fd5b505050505050565b6000546001600160a01b0362010000909104163314620010955760405162461bcd60e51b8152600401620008899062002e13565b60008484604051602001620010ac92919062002e48565b60408051601f198184030181529181528151602092830120600081815260069093529120549091506001600160a01b031680156200112d5760405162461bcd60e51b815260206004820152601760248201527f746865206d617070696e6720746f6b656e206578697374000000000000000000604482015260640162000889565b6005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b038781166001600160a01b03199283168117909355604080516060808201835263ffffffff8a811683528d851660208085019182528e871685870190815260008a8152600783528781209651875494518a16600160201b026001600160c01b0319909516951694909417929092178555905193909801805493861693871693909317909255888252600687529082902080549094168517909355805187815291861694820194909452928301919091527f29a3be6bc8d5f33dbb701f05b9894734586554dbd280ce15c46b399836809662910160405180910390a1505050505050565b6000546001600160a01b03620100009091041633146200127b5760405162461bcd60e51b8152600401620008899062002e13565b60008054604051620100009091046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805462010000600160b01b0319169055565b6b06d6f646c6461722f64766d760441b3314620012fd5760405162461bcd60e51b8152600401620008899062002e6f565b604080516001600160e01b0319851660208201526001600160401b03841681830152815180820383018152606090910191829052906000906009906200134590849062002d45565b90815260408051918290036020908101832060608401835280546001600160a01b0390811685526001820154169184019190915260020154908201819052909150158015906200139e575080516001600160a01b031615155b8015620013b7575060208101516001600160a01b031615155b620014055760405162461bcd60e51b815260206004820152601b60248201527f696e76616c696420756e636f6e6669726d6564206d6573736167650000000000604482015260640162000889565b8215620014805760208101516040808301519051632770a7eb60e21b815230600482015260248101919091526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156200146157600080fd5b505af115801562001476573d6000803e3d6000fd5b5050505062001548565b60208101518151604080840151905163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af1158015620014dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001503919062002b6f565b620015485760405162461bcd60e51b81526020600482015260146024820152731d1c985b9cd9995c88189858dac819985a5b195960621b604482015260640162000889565b6009826040516200155a919062002d45565b90815260408051918290036020908101832080546001600160a01b0319908116825560018201805490911690556000600290910155835184820151858401516001600160e01b03198b1686526001600160401b038a16938601939093526001600160a01b0391821685850152166060840152608083015284151560a0830152517fe4cb049ebb98d050783ff7f8aefe07b355d08495703eb31f3bf2615607965b369160c0908290030190a15050505050565b600054610100900460ff168062001626575060005460ff16155b6200168b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000889565b600054610100900460ff16158015620016ae576000805461ffff19166101011790555b620016b8620021f7565b8015620016cb576000805461ff00191690555b50565b6000546001600160a01b0362010000909104163314620017025760405162461bcd60e51b8152600401620008899062002e13565b62000ee6828262002243565b6000546001600160a01b0362010000909104163314620017425760405162461bcd60e51b8152600401620008899062002e13565b62000fca62002295565b6000546001600160a01b0362010000909104163314620017805760405162461bcd60e51b8152600401620008899062002e13565b600a805460e09290921c600160201b0267ffffffff0000000019909216919091179055565b620017b2838383620022f1565b600a546040516369424a8d60e11b8152600160201b90910460e01b6001600160e01b031916600482015260009060189063d284951a90602401602060405180830381865afa15801562001809573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200182f919062002d63565b6200183c90600162002eb7565b600a5460408051600160201b90920460e01b6001600160e01b03191682526001600160401b03831660208301526001600160a01b038781169183019190915285166060820152608081018490529091507f1baa0f3eb14439c196c005a74edac2b90c7a7d3331ef545cdae30b9a240a62149060a00160405180910390a150505050565b6000546001600160a01b0362010000909104163314620018f35760405162461bcd60e51b8152600401620008899062002e13565b600a805463ffffffff191663ffffffff92909216919091179055565b6000546001600160a01b0362010000909104163314620019435760405162461bcd60e51b8152600401620008899062002e13565b600084846040516020016200195a92919062002e48565b60408051601f198184030181529181528151602092830120600081815260069093529120549091506001600160a01b031680620019da5760405162461bcd60e51b815260206004820152601b60248201527f746865206d617070696e6720746f6b656e206e6f742065786973740000000000604482015260640162000889565b82620019e560055490565b11801562001a255750806001600160a01b03166005848154811062001a0e5762001a0e62002ee5565b6000918252602090912001546001600160a01b0316145b62001a635760405162461bcd60e51b815260206004820152600d60248201526c0d2dcecc2d8d2c840d2dcc8caf609b1b604482015260640162000889565b836005848154811062001a7a5762001a7a62002ee5565b6000918252602080832090910180546001600160a01b039485166001600160a01b0319918216179091558484168352600780835260408085208151606081018352815463ffffffff8082168352600160201b8083048b16848a0190815260018681018054808f16888b019081529a8d526001600160c01b0319968716909855968a169096558f8c16808c52878c208651815493518f1690940292909516929093169190911717825594519201805492909816918516919091179096558785526006909352928290208054909116909217909155517f29a3be6bc8d5f33dbb701f05b9894734586554dbd280ce15c46b3998368096629062001b9a908590859089909283526001600160a01b03918216602084015216604082015260600190565b60405180910390a150505050505050565b6005818154811062001bbc57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080838360405160200162001bee92919062002e48565b60408051808303601f190181529181528151602092830120600090815260069092529020546001600160a01b0316949350505050565b60006b06d6f646c6461722f64766d760441b331462001c575760405162461bcd60e51b8152600401620008899062002e6f565b60045460ff161562001c7d5760405162461bcd60e51b8152600401620008899062002b45565b63ffffffff8716158062001c9757508663ffffffff166001145b62001cf65760405162461bcd60e51b815260206004820152602860248201527f746f6b656e20747970652063616e6e6f74206d617070696e6720746f206572636044820152671918103a37b5b2b760c11b606482015260840162000889565b6000838360405160200162001d0d92919062002e48565b60408051601f198184030181529181528151602092830120600081815260069093529120549091506001600160a01b03161562001d8d5760405162461bcd60e51b815260206004820152601a60248201527f636f6e747261637420686173206265656e206465706c6f796564000000000000604482015260640162000889565b60006040518060200162001da1906200263d565b601f1982820381018352601f90910116604081815263ffffffff8c16600090815260086020908152828220546001600160a01b03169084015261dead8284015260608084015260808084018290528251808503909101815260a0840190925292935062001e149184919060c00162002efb565b604051602081830303815290604052905062001e318382620024ab565b604051630b127b6360e11b81529094506001600160a01b03851690631624f6c69062001e66908c908c908c9060040162002f25565b600060405180830381600087803b15801562001e8157600080fd5b505af115801562001e96573d6000803e3d6000fd5b50505050836006600085815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506005849080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b0316021790555060405180606001604052808b63ffffffff168152602001876001600160a01b03168152602001866001600160a01b031681525060076000866001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050507fc9c337e478378d4317643765b21b7d2da0d66f86675b2e3b6e1aff67ce572daf86868660405162002049939291906001600160a01b0393841681529183166020830152909116604082015260600190565b60405180910390a15050509695505050505050565b6000546001600160a01b0362010000909104163314620020925760405162461bcd60e51b8152600401620008899062002e13565b6001600160a01b038116620020f95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000889565b600080546040516001600160a01b03808516936201000090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b60045460ff16620021ad5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640162000889565b6004805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000805462010000600160b01b03191633620100008102919091178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b6001600160a01b038216600081815260016020908152604091829020849055815192835282018390527f9cf57ddcfa91b59f4d736ce39ea043954e4ea1e05929dea3e544ecb29cd78c26910162000f80565b60045460ff1615620022bb5760405162461bcd60e51b8152600401620008899062002b45565b6004805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620021da3390565b6b06d6f646c6461722f64766d760441b3314620023225760405162461bcd60e51b8152600401620008899062002e6f565b60045460ff1615620023485760405162461bcd60e51b8152600401620008899062002b45565b600081116200239a5760405162461bcd60e51b815260206004820152601b60248201527f63616e206e6f74207265636569766520616d6f756e74207a65726f0000000000604482015260640162000889565b6001600160a01b038084166000908152600760209081526040918290208251606081018452815463ffffffff81168252600160201b900485169281019290925260010154909216908201819052620024355760405162461bcd60e51b815260206004820152601f60248201527f746f6b656e206973206e6f74206372656174656420627920666163746f727900604482015260640162000889565b620024418483620024c5565b6040516340c10f1960e01b81526001600160a01b038481166004830152602482018490528516906340c10f1990604401600060405180830381600087803b1580156200248c57600080fd5b505af1158015620024a1573d6000803e3d6000fd5b5050505050505050565b6000828251602084016000f59050803b62000e8f57600080fd5b620024d182826200256d565b6200253a5760405162461bcd60e51b815260206004820152603260248201527f4461696c794c696d69743a3a20657870656e644461696c794c696d69743a204f6044820152713aba1037ba103230b4b63c903634b6b4ba1760711b606482015260840162000889565b6001600160a01b038216600090815260036020526040812080548392906200256490849062002dde565b90915550505050565b6001600160a01b03821660009081526002602052604081205462002595906201518062002dde565b421115620025c4576001600160a01b038316600090815260026020908152604080832042905560039091528120555b6001600160a01b038316600090815260016020908152604080832054600390925290912054620025f690849062002dde565b11806200262557506001600160a01b03831660009081526003602052604090205462002623838262002dde565b105b15620026345750600062000e8f565b50600192915050565b610f398062002f6383390190565b803563ffffffff811681146200266057600080fd5b919050565b6001600160401b0381168114620016cb57600080fd5b80356001600160a01b03811681146200266057600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620026d457620026d462002693565b604052919050565b60006001600160401b03821115620026f857620026f862002693565b50601f01601f191660200190565b600082601f8301126200271857600080fd5b81356200272f6200272982620026dc565b620026a9565b8181528460208386010111156200274557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156200277b57600080fd5b62002786866200264b565b94506020860135620027988162002665565b9350620027a8604087016200267b565b925060608601356001600160401b03811115620027c457600080fd5b620027d28882890162002706565b95989497509295608001359392505050565b600060208284031215620027f757600080fd5b5035919050565b6000602082840312156200281157600080fd5b6200281c826200267b565b9392505050565b600080604083850312156200283757600080fd5b62002842836200267b565b946020939093013593505050565b600080604083850312156200286457600080fd5b6200286f836200264b565b91506200287f602084016200267b565b90509250929050565b600080604083850312156200289c57600080fd5b6200286f836200267b565b60008060008060808587031215620028be57600080fd5b620028c9856200267b565b9350620028d9602086016200267b565b9250620028e9604086016200267b565b9150620028f9606086016200264b565b905092959194509250565b6000602082840312156200291757600080fd5b81356001600160401b038111156200292e57600080fd5b6200293c8482850162002706565b949350505050565b80356001600160e01b0319811681146200266057600080fd5b8015158114620016cb57600080fd5b6000806000606084860312156200298257600080fd5b6200298d8462002944565b925060208401356200299f8162002665565b91506040840135620029b1816200295d565b809150509250925092565b600060208284031215620029cf57600080fd5b6200281c826200264b565b600060208284031215620029ed57600080fd5b6200281c8262002944565b60008060006060848603121562002a0e57600080fd5b62002a19846200267b565b925062002a29602085016200267b565b9150604084013590509250925092565b6000806000806080858703121562002a5057600080fd5b62002a5b856200267b565b935062002a6b602086016200267b565b925062002a7b604086016200267b565b9396929550929360600135925050565b60008060008060008060c0878903121562002aa557600080fd5b62002ab0876200264b565b955060208701356001600160401b038082111562002acd57600080fd5b62002adb8a838b0162002706565b9650604089013591508082111562002af257600080fd5b5062002b0189828a0162002706565b945050606087013560ff8116811462002b1957600080fd5b925062002b29608088016200267b565b915062002b3960a088016200267b565b90509295509295509295565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60006020828403121562002b8257600080fd5b81516200281c816200295d565b60005b8381101562002bac57818101518382015260200162002b92565b8381111562002bbc576000848401525b50505050565b6000815180845262002bdc81602086016020860162002b8f565b601f01601f19169290920160200192915050565b63ffffffff87811682526001600160401b0387166020830152851660408201526001600160a01b038416606082015260c06080820181905260009062002c399083018562002bc2565b90508260a0830152979650505050505050565b60006020828403121562002c5f57600080fd5b81516001600160401b0381111562002c7657600080fd5b8201601f8101841362002c8857600080fd5b805162002c996200272982620026dc565b81815285602083850101111562002caf57600080fd5b62002cc282602083016020860162002b8f565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b60008262002cff57634e487b7160e01b600052601260045260246000fd5b500490565b63ffffffff8516815263ffffffff60e01b8416602082015260806040820152600062002d34608083018562002bc2565b905082606083015295945050505050565b6000825162002d5981846020870162002b8f565b9190910192915050565b60006020828403121562002d7657600080fd5b81516200281c8162002665565b6001600160e01b0319871681526001600160401b03861660208201526001600160a01b03858116604083015260c0606083018190526000919062002dca9084018762002bc2565b941660808301525060a00152949350505050565b6000821982111562002df45762002df462002ccb565b500190565b60008282101562002e0e5762002e0e62002ccb565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b60208082526028908201527f53797374656d3a2063616c6c6572206973206e6f74207468652073797374656d604082015267081858d8dbdd5b9d60c21b606082015260800190565b60006001600160401b0380831681851680830382111562002edc5762002edc62002ccb565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b6000835162002f0f81846020880162002b8f565b83519083019062002edc81836020880162002b8f565b60608152600062002f3a606083018662002bc2565b828103602084015262002f4e818662002bc2565b91505060ff8316604083015294935050505056fe608060405260405162000f3938038062000f39833981016040819052620000269162000507565b82816200005560017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005e7565b60008051602062000ef2833981519152146200007557620000756200060d565b6200008382826000620000e7565b50620000b3905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005e7565b60008051602062000ed283398151915214620000d357620000d36200060d565b620000de8262000124565b50505062000676565b620000f2836200017f565b600082511180620001005750805b156200011f576200011d8383620001c160201b620002601760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200014f620001f0565b604080516001600160a01b03928316815291841660208301520160405180910390a16200017c8162000229565b50565b6200018a81620002de565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620001e9838360405180606001604052806027815260200162000f126027913962000381565b9392505050565b60006200021a60008051602062000ed283398151915260001b6200045e60201b620002081760201c565b546001600160a01b0316919050565b6001600160a01b038116620002945760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002bd60008051602062000ed283398151915260001b6200045e60201b620002081760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620002f4816200046160201b6200028c1760201c565b620003585760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200028b565b80620002bd60008051602062000ef283398151915260001b6200045e60201b620002081760201c565b6060833b620003e25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200028b565b600080856001600160a01b031685604051620003ff919062000623565b600060405180830381855af49150503d80600081146200043c576040519150601f19603f3d011682016040523d82523d6000602084013e62000441565b606091505b5090925090506200045482828662000467565b9695505050505050565b90565b3b151590565b6060831562000478575081620001e9565b825115620004895782518084602001fd5b8160405162461bcd60e51b81526004016200028b919062000641565b80516001600160a01b0381168114620004bd57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004f5578181015183820152602001620004db565b838111156200011d5750506000910152565b6000806000606084860312156200051d57600080fd5b6200052884620004a5565b92506200053860208501620004a5565b60408501519092506001600160401b03808211156200055657600080fd5b818601915086601f8301126200056b57600080fd5b815181811115620005805762000580620004c2565b604051601f8201601f19908116603f01168101908382118183101715620005ab57620005ab620004c2565b81604052828152896020848701011115620005c557600080fd5b620005d8836020830160208801620004d8565b80955050505050509250925092565b6000828210156200060857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825162000637818460208701620004d8565b9190910192915050565b602081526000825180602084015262000662816040850160208701620004d8565b601f01601f19169190910160400192915050565b61084c80620006866000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106d6565b610118565b61005b6100933660046106f1565b61015f565b3480156100a457600080fd5b506100ad6101d0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106d6565b61020b565b3480156100f557600080fd5b506100ad610235565b610106610292565b610116610111610331565b61033b565b565b61012061035f565b6001600160a01b0316336001600160a01b031614156101575761015481604051806020016040528060008152506000610392565b50565b6101546100fe565b61016761035f565b6001600160a01b0316336001600160a01b031614156101c8576101c38383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610392915050565b505050565b6101c36100fe565b60006101da61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb610331565b905090565b6102086100fe565b90565b61021361035f565b6001600160a01b0316336001600160a01b0316141561015757610154816103bd565b600061023f61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb61035f565b606061028583836040518060600160405280602781526020016107f060279139610411565b9392505050565b3b151590565b61029a61035f565b6001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101fb6104e5565b3660008037600080366000845af43d6000803e80801561035a573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b61039b8361050d565b6000825111806103a85750805b156101c3576103b78383610260565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103e661035f565b604080516001600160a01b03928316815291841660208301520160405180910390a16101548161054d565b6060833b6104705760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610328565b600080856001600160a01b03168560405161048b91906107a0565b600060405180830381855af49150503d80600081146104c6576040519150601f19603f3d011682016040523d82523d6000602084013e6104cb565b606091505b50915091506104db8282866105f6565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610383565b6105168161062f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105b25760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610328565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b60608315610605575081610285565b8251156106155782518084602001fd5b8160405162461bcd60e51b815260040161032891906107bc565b803b6106935760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610328565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105d5565b80356001600160a01b03811681146106d157600080fd5b919050565b6000602082840312156106e857600080fd5b610285826106ba565b60008060006040848603121561070657600080fd5b61070f846106ba565b9250602084013567ffffffffffffffff8082111561072c57600080fd5b818601915086601f83011261074057600080fd5b81358181111561074f57600080fd5b87602082850101111561076157600080fd5b6020830194508093505050509250925092565b60005b8381101561078f578181015183820152602001610777565b838111156103b75750506000910152565b600082516107b2818460208701610774565b9190910192915050565b60208152600082518060208401526107db816040850160208701610774565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220829314ee14f7cd5a03c189b4288a405734a98fc8176645ef4d260bba31e20b2664736f6c634300080a0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f6318a7db114afda2594ea269077cb22a56df494ff9b129ae707a8a68c6a7d1064736f6c634300080a0033";

pub const MAPPING_TOKEN_LOGIC_CONTRACT_BYTECODE: &str = "";
darwinia_support::impl_test_account_data! {}

frame_support::parameter_types! {
	pub const ExistentialDeposit: u64 = 1;
}
impl darwinia_balances::Config<RingInstance> for Test {
	type DustRemoval = ();
	type ExistentialDeposit = ExistentialDeposit;
	type AccountStore = System;
	type OtherCurrencies = ();
	type Balance = Balance;
	type Event = ();
	type MaxLocks = ();
	type MaxReserves = ();
	type ReserveIdentifier = [u8; 8];
	type BalanceInfo = AccountData<Balance>;
	type WeightInfo = ();
}
impl darwinia_balances::Config<KtonInstance> for Test {
	type DustRemoval = ();
	type ExistentialDeposit = ExistentialDeposit;
	type AccountStore = System;
	type OtherCurrencies = ();
	type Balance = Balance;
	type Event = ();
	type MaxLocks = ();
	type MaxReserves = ();
	type ReserveIdentifier = [u8; 8];
	type BalanceInfo = AccountData<Balance>;
	type WeightInfo = ();
}

frame_support::parameter_types! {
	pub const MinimumPeriod: u64 = 6000 / 2;
}
impl pallet_timestamp::Config for Test {
	type Moment = u64;
	type OnTimestampSet = ();
	type MinimumPeriod = MinimumPeriod;
	type WeightInfo = ();
}

impl frame_system::Config for Test {
	type BaseCallFilter = Everything;
	type BlockWeights = ();
	type BlockLength = ();
	type DbWeight = ();
	type Origin = Origin;
	type Index = u64;
	type BlockNumber = u64;
	type Hash = H256;
	type Call = Call;
	type Hashing = BlakeTwo256;
	type AccountId = AccountId32;
	type Lookup = IdentityLookup<Self::AccountId>;
	type Header = Header;
	type Event = ();
	type BlockHashCount = ();
	type Version = ();
	type PalletInfo = PalletInfo;
	type AccountData = AccountData<Balance>;
	type OnNewAccount = ();
	type OnKilledAccount = ();
	type SystemWeightInfo = ();
	type SS58Prefix = ();
	type OnSetCode = ();
}

frame_support::parameter_types! {
	pub const DvmPalletId: PalletId = PalletId(*b"dar/dvmp");
}

impl darwinia_ethereum::Config for Test {
	type Event = ();
	type PalletId = DvmPalletId;
	type StateRoot = IntermediateStateRoot;
	type RingCurrency = Ring;
	type KtonCurrency = Kton;
}

pub struct FixedGasPrice;
impl FeeCalculator for FixedGasPrice {
	fn min_gas_price() -> U256 {
		1.into()
	}
}

pub struct HashedConverter;
impl IntoAccountId<AccountId32> for HashedConverter {
	fn into_account_id(address: H160) -> AccountId32 {
		let mut data = [0u8; 32];
		data[0..20].copy_from_slice(&address[..]);
		AccountId32::from(Into::<[u8; 32]>::into(data))
	}
}

frame_support::parameter_types! {
	pub const ChainId: u64 = 42;
	pub const BlockGasLimit: U256 = U256::MAX;
	pub PrecompilesValue: MockPrecompiles<Test> = MockPrecompiles::<_>::new();
}
impl darwinia_evm::Config for Test {
	type FeeCalculator = FixedGasPrice;
	type GasWeightMapping = ();
	type CallOrigin = EnsureAddressTruncated<Self::AccountId>;
	type IntoAccountId = HashedConverter;
	type Event = ();
	type PrecompilesType = MockPrecompiles<Self>;
	type PrecompilesValue = PrecompilesValue;
	type FindAuthor = ();
	type BlockHashMapping = SubstrateBlockHashMapping<Self>;
	type ChainId = ChainId;
	type BlockGasLimit = BlockGasLimit;
	type Runner = darwinia_evm::runner::stack::Runner<Self>;
	type RingAccountBasic = DvmAccountBasic<Self, Ring, RingRemainBalance>;
	type KtonAccountBasic = DvmAccountBasic<Self, Kton, KtonRemainBalance>;
	type OnChargeTransaction = EVMCurrencyAdapter;
}

frame_support::parameter_types! {
	pub const S2sRelayPalletId: PalletId = PalletId(*b"da/s2sre");
	pub const PangoroChainId: bp_runtime::ChainId = *b"pagr";
	pub RootAccountForPayments: Option<AccountId32> = Some([1;32].into());
	pub PangoroName: Vec<u8> = (b"Pangoro").to_vec();
	pub MessageLaneId: [u8; 4] = *b"ltor";
}

pub struct MockPrecompiles<R>(PhantomData<R>);
impl<R> MockPrecompiles<R>
where
	R: darwinia_evm::Config,
{
	pub fn new() -> Self {
		Self(Default::default())
	}
	pub fn used_addresses() -> sp_std::vec::Vec<H160> {
		sp_std::vec![1, 2, 3, 4, 24]
			.into_iter()
			.map(|x| H160::from_low_u64_be(x))
			.collect()
	}
}

impl<R> PrecompileSet for MockPrecompiles<R>
where
	Sub2SubBridge<R, MockS2sMessageSender, ()>: Precompile,
	Dispatch<R>: Precompile,
	R: darwinia_evm::Config,
{
	fn execute(
		&self,
		address: H160,
		input: &[u8],
		target_gas: Option<u64>,
		context: &Context,
		is_static: bool,
	) -> Option<PrecompileResult> {
		let to_address = |n: u64| -> H160 { H160::from_low_u64_be(n) };

		match address {
			// Ethereum precompiles
			_ if address == to_address(1) => {
				Some(ECRecover::execute(input, target_gas, context, is_static))
			}
			_ if address == to_address(2) => {
				Some(Sha256::execute(input, target_gas, context, is_static))
			}
			_ if address == to_address(3) => {
				Some(Ripemd160::execute(input, target_gas, context, is_static))
			}
			_ if address == to_address(4) => {
				Some(Identity::execute(input, target_gas, context, is_static))
			}
			// Darwinia precompiles
			_ if address == to_address(24) => {
				Some(<Sub2SubBridge<R, MockS2sMessageSender, ()>>::execute(
					input, target_gas, context, is_static,
				))
			}
			_ if address == to_address(25) => Some(<Dispatch<R>>::execute(
				input, target_gas, context, is_static,
			)),
			_ => None,
		}
	}
	fn is_precompile(&self, address: H160) -> bool {
		Self::used_addresses().contains(&address)
	}
}

pub struct AccountIdConverter;
impl Convert<H256, AccountId32> for AccountIdConverter {
	fn convert(hash: H256) -> AccountId32 {
		hash.to_fixed_bytes().into()
	}
}
pub struct MockS2sMessageSender;
impl RelayMessageSender for MockS2sMessageSender {
	fn encode_send_message(
		_message_pallet_index: u32,
		_lane_id: [u8; 4],
		_payload: Vec<u8>,
		_fee: u128,
	) -> Result<Vec<u8>, &'static str> {
		Ok(Vec::new())
	}
}
impl LatestMessageNoncer for MockS2sMessageSender {
	fn outbound_latest_generated_nonce(_lane_id: [u8; 4]) -> u64 {
		0
	}
	fn inbound_latest_received_nonce(_lane_id: [u8; 4]) -> u64 {
		0
	}
}

pub struct TruncateToEthAddress;
impl ToEthAddress<AccountId32> for TruncateToEthAddress {
	fn into_ethereum_id(address: &AccountId32) -> H160 {
		let account20: &[u8] = &address.as_ref();
		H160::from_slice(&account20[..20])
	}
}

impl Config for Test {
	type Event = ();
	type PalletId = S2sRelayPalletId;
	type WeightInfo = ();

	type RingCurrency = Ring;
	type BridgedAccountIdConverter = AccountIdConverter;
	type BridgedChainId = PangoroChainId;
	type ToEthAddressT = TruncateToEthAddress;
	type InternalTransactHandler = Ethereum;
	type BackingChainName = PangoroName;
	type MessageLaneId = MessageLaneId;
}

frame_support::construct_runtime! {
	pub enum Test where
		Block = Block,
		NodeBlock = Block,
		UncheckedExtrinsic = UncheckedExtrinsic,
	{
		System: frame_system::{Pallet, Call, Config, Storage, Event<T>},
		Timestamp: pallet_timestamp::{Pallet, Call, Storage},
		Ring: darwinia_balances::<Instance1>::{Pallet, Call, Storage, Config<T>, Event<T>},
		Kton: darwinia_balances::<Instance2>::{Pallet, Call, Storage, Config<T>, Event<T>},
		S2sIssuing: s2s_issuing::{Pallet, Call, Storage, Config, Event<T>},
		EVM: darwinia_evm::{Pallet, Call, Storage, Config, Event<T>},
		Ethereum: darwinia_ethereum::{Pallet, Call, Storage, Config, Origin},
	}
}

impl fp_self_contained::SelfContainedCall for Call {
	type SignedInfo = H160;

	fn is_self_contained(&self) -> bool {
		match self {
			Call::Ethereum(call) => call.is_self_contained(),
			_ => false,
		}
	}

	fn check_self_contained(&self) -> Option<Result<Self::SignedInfo, TransactionValidityError>> {
		match self {
			Call::Ethereum(call) => call.check_self_contained(),
			_ => None,
		}
	}

	fn validate_self_contained(&self, info: &Self::SignedInfo) -> Option<TransactionValidity> {
		match self {
			Call::Ethereum(call) => call.validate_self_contained(info),
			_ => None,
		}
	}

	fn pre_dispatch_self_contained(
		&self,
		info: &Self::SignedInfo,
	) -> Option<Result<(), TransactionValidityError>> {
		match self {
			Call::Ethereum(call) => call.pre_dispatch_self_contained(info),
			_ => None,
		}
	}

	fn apply_self_contained(
		self,
		info: Self::SignedInfo,
	) -> Option<sp_runtime::DispatchResultWithInfo<sp_runtime::traits::PostDispatchInfoOf<Self>>> {
		use sp_runtime::traits::Dispatchable as _;
		match self {
			call @ Call::Ethereum(darwinia_ethereum::Call::transact { .. }) => {
				Some(call.dispatch(Origin::from(RawOrigin::EthereumTransaction(info))))
			}
			_ => None,
		}
	}
}

pub struct AccountInfo {
	pub address: H160,
	pub account_id: AccountId32,
	pub private_key: H256,
}

pub struct LegacyUnsignedTransaction {
	pub nonce: U256,
	pub gas_price: U256,
	pub gas_limit: U256,
	pub action: TransactionAction,
	pub value: U256,
	pub input: Vec<u8>,
}
impl LegacyUnsignedTransaction {
	fn signing_rlp_append(&self, s: &mut RlpStream) {
		s.begin_list(9);
		s.append(&self.nonce);
		s.append(&self.gas_price);
		s.append(&self.gas_limit);
		s.append(&self.action);
		s.append(&self.value);
		s.append(&self.input);
		s.append(&ChainId::get());
		s.append(&0u8);
		s.append(&0u8);
	}

	fn signing_hash(&self) -> H256 {
		let mut stream = RlpStream::new();
		self.signing_rlp_append(&mut stream);
		H256::from_slice(&Keccak256::digest(&stream.out()).as_slice())
	}

	pub fn sign(&self, key: &H256) -> Transaction {
		let hash = self.signing_hash();
		let msg = libsecp256k1::Message::parse(hash.as_fixed_bytes());
		let s = libsecp256k1::sign(
			&msg,
			&libsecp256k1::SecretKey::parse_slice(&key[..]).unwrap(),
		);
		let sig = s.0.serialize();

		let sig = TransactionSignature::new(
			s.1.serialize() as u64 % 2 + ChainId::get() * 2 + 35,
			H256::from_slice(&sig[0..32]),
			H256::from_slice(&sig[32..64]),
		)
		.unwrap();

		Transaction::Legacy(ethereum::LegacyTransaction {
			nonce: self.nonce,
			gas_price: self.gas_price,
			gas_limit: self.gas_limit,
			action: self.action,
			value: self.value,
			input: self.input.clone(),
			signature: sig,
		})
	}
}

fn address_build(seed: u8) -> AccountInfo {
	let raw_private_key = [seed + 1; 32];
	let secret_key = libsecp256k1::SecretKey::parse_slice(&raw_private_key).unwrap();
	let raw_public_key = &libsecp256k1::PublicKey::from_secret_key(&secret_key).serialize()[1..65];
	let raw_address = {
		let mut s = [0; 20];
		s.copy_from_slice(&Keccak256::digest(raw_public_key)[12..]);
		s
	};
	let raw_account = {
		let mut s = [0; 32];
		s[..20].copy_from_slice(&raw_address);
		s
	};

	AccountInfo {
		private_key: raw_private_key.into(),
		account_id: raw_account.into(),
		address: raw_address.into(),
	}
}

pub fn new_test_ext(accounts_len: usize) -> (Vec<AccountInfo>, sp_io::TestExternalities) {
	let mut t = frame_system::GenesisConfig::default()
		.build_storage::<Test>()
		.unwrap();
	let mapping_factory_address =
		H160::from_str("0000000000000000000000000000000000000002").unwrap();

	<s2s_issuing::GenesisConfig as GenesisBuild<Test>>::assimilate_storage(
		&s2s_issuing::GenesisConfig {
			mapping_factory_address,
		},
		&mut t,
	)
	.unwrap();

	let pairs = (0..accounts_len)
		.map(|i| address_build(i as u8))
		.collect::<Vec<_>>();

	let balances: Vec<_> = (0..accounts_len)
		.map(|i| (pairs[i].account_id.clone(), 100_000_000_000))
		.collect();

	darwinia_balances::GenesisConfig::<Test, RingInstance> { balances }
		.assimilate_storage(&mut t)
		.unwrap();
	let mut ext = sp_io::TestExternalities::new(t);
	ext.execute_with(|| System::set_block_number(1));
	(pairs, ext.into())
	//t.into()
}
