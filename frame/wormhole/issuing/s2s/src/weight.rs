// This file is part of Darwinia.
//
// Copyright (C) 2018-2022 Darwinia Network
// SPDX-License-Identifier: GPL-3.0
//
// Darwinia is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Darwinia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for from_substrate_issuing
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-03-24, STEPS: `100`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/drml
// benchmark
// --chain
// dev
// --wasm-execution
// compiled
// --pallet
// from_substrate_issuing
// --execution
// wasm
// --extrinsic=*
// --steps
// 100
// --repeat
// 10
// --raw
// --heap-pages=4096
// --output=./frame/wormhole/issuing/s2s/src/weight.rs
// --template=./.maintain/frame-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for from_substrate_issuing.
pub trait WeightInfo {
	fn register_from_remote() -> Weight;
	fn issue_from_remote() -> Weight;
	fn set_mapping_factory_address() -> Weight;
	fn set_remote_backing_account() -> Weight;
}

/// Weights for from_substrate_issuing using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Substrate2SubstrateIssuing RemoteBackingAccount (r:1 w:0)
	// Storage: Substrate2SubstrateIssuing MappingFactoryAddress (r:1 w:0)
	// Storage: System Account (r:4 w:3)
	// Storage: Ethereum RemainingRingBalance (r:4 w:0)
	// Storage: EVM AccountCodes (r:3 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: EVM AccountStorages (r:17 w:15)
	// Storage: Ethereum Pending (r:1 w:1)
	fn register_from_remote() -> Weight {
		(2_961_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(35 as Weight))
			.saturating_add(T::DbWeight::get().writes(22 as Weight))
	}
	// Storage: Substrate2SubstrateIssuing RemoteBackingAccount (r:1 w:0)
	// Storage: Substrate2SubstrateIssuing MappingFactoryAddress (r:1 w:0)
	// Storage: System Account (r:5 w:1)
	// Storage: Ethereum RemainingRingBalance (r:5 w:0)
	// Storage: EVM AccountCodes (r:4 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: EVM AccountStorages (r:13 w:3)
	// Storage: Ethereum Pending (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: BridgePangoroMessages InboundLanes (r:1 w:0)
	fn issue_from_remote() -> Weight {
		(1_599_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(36 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: Substrate2SubstrateIssuing MappingFactoryAddress (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	fn set_mapping_factory_address() -> Weight {
		(44_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: Substrate2SubstrateIssuing RemoteBackingAccount (r:0 w:1)
	fn set_remote_backing_account() -> Weight {
		(39_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Substrate2SubstrateIssuing RemoteBackingAccount (r:1 w:0)
	// Storage: Substrate2SubstrateIssuing MappingFactoryAddress (r:1 w:0)
	// Storage: System Account (r:4 w:3)
	// Storage: Ethereum RemainingRingBalance (r:4 w:0)
	// Storage: EVM AccountCodes (r:3 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: EVM AccountStorages (r:17 w:15)
	// Storage: Ethereum Pending (r:1 w:1)
	fn register_from_remote() -> Weight {
		(2_961_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(35 as Weight))
			.saturating_add(RocksDbWeight::get().writes(22 as Weight))
	}
	// Storage: Substrate2SubstrateIssuing RemoteBackingAccount (r:1 w:0)
	// Storage: Substrate2SubstrateIssuing MappingFactoryAddress (r:1 w:0)
	// Storage: System Account (r:5 w:1)
	// Storage: Ethereum RemainingRingBalance (r:5 w:0)
	// Storage: EVM AccountCodes (r:4 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: EVM AccountStorages (r:13 w:3)
	// Storage: Ethereum Pending (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: BridgePangoroMessages InboundLanes (r:1 w:0)
	fn issue_from_remote() -> Weight {
		(1_599_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(36 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: Substrate2SubstrateIssuing MappingFactoryAddress (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	fn set_mapping_factory_address() -> Weight {
		(44_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: Substrate2SubstrateIssuing RemoteBackingAccount (r:0 w:1)
	fn set_remote_backing_account() -> Weight {
		(39_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
}
