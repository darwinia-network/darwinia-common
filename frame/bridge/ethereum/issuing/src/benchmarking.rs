// This file is part of Darwinia.
//
// Copyright (C) 2018-2021 Darwinia Network
// SPDX-License-Identifier: GPL-3.0
//
// Darwinia is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Darwinia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Darwinia. If not, see <https://www.gnu.org/licenses/>.

#![cfg(feature = "runtime-benchmarks")]

use super::*;

use array_bytes::{hex2bytes_unchecked, hex_into_unchecked};
use frame_benchmarking::benchmarks;
use frame_system::RawOrigin;
use sp_runtime::traits::UniqueSaturatedInto;
use sp_std::vec;

use ethereum_primitives::{header::EthereumHeader, receipt::ReceiptProof, H256};
use sp_std::str::FromStr;

use darwinia_ethereum_relay::MMRProof;
use darwinia_support::traits::EthereumReceipt as EthereumReceiptT;

use codec::{Decode, Encode};

benchmarks! {
	register_erc20 {
		let header : EthereumHeader = serde_json::from_str(r#"{
        "parent_hash":"0x076323243bb412fd1526da231ebcabffeee8ad7dcb8a3c009c87b6a4f49c429e",
        "timestamp":1624500254,
        "number":10499402,
        "author":"0x1cffe205e97976bb9d1ec006f5222360a89353e0",
        "transactions_root":"0xede00358653ae8f8aa6bd70843e50c0593a6d9c196d4f5dd97b40bbb7096e68a",
        "uncles_hash":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
        "extra_data":"0x436f6e73656e5379732048797065726c65646765722042657375",
        "state_root":"0x1c151425f8e28b2408f7f92ff14e7bd2c8575fdd86caec31b1856f837b96420a",
        "receipts_root":"0x390a4be2c778271a29dd2d2d57cec7c6a6791336092e9557c07c967b4e54f862",
        "log_bloom":"0x000000000000000000000000800000000000000000200000000000004000000a000000800000010000000040000000000000000000000000000000000000000000000000020300000000000800000000000004000200000000000000000000000400000802000000000000080000280000000000800000000000003000000000220000020000400000000a000100000000000000000080000000000000000000000000000000000000804000220000000000000000000000000000004000000000000002000000000000a00000000000000000000100000000000c00000020000000000000100000000000000000000000000080000000000000001000010010",
        "gas_used":478428,
        "gas_limit":16000000,
        "difficulty":1108509492,
        "seal":["0xa04dc6d3cf65a6d5625f6a5798643b11c865d15a11f6dfe1c239e28d3341a1aec8","0x88515a2ef500b2be77"],
        "hash":"0xabf627ce77d9f92a40f34e3cace721c3f089000dae820d00d3e99314c263a0c3",
        "base_fee_per_gas":1116547859}"#).unwrap();
		let receipt_proof = ReceiptProof {
			index: 13,
			proof: array_bytes::hex2bytes_unchecked("0xf903c3f903c0b853f851a0b3f6df122df06ffe6513d7896903ad010e9c86e251433fb1880f1c6289b930f980808080808080a02db1fb7c3f10bcc54dcbf5e14348d0d05488245238883eba62a989152e3a53718080808080808080b901b4f901b180a06d2a5febcaaf0e918718cc54494cc067bea5ee6686ee81204ab80cb2e4374975a088144864f0a583dad46043084e601b2f0f7b75054e9faee7c34e9839a175e9dca0f6913065cb63d6dae545865364417d80d5743064bec93912caf0c1e2aed42aa7a0d05b2d7a83d74f7c902882507119be8eafa167811b89b00e50c9b4df5fcac7daa0583ea85c95e110282ee6f68cc55c90276b3f1e855cbd156379cb29376845357aa0ed68fc478694bc5a842e2bde468f92cf742124c73e153a1dffa7b18343869e79a02d7cf76429ff8fc602a3d4e2d99d6a50f09ab439a0cfc0135bad95aa252fa2b7a0a7109e55d97a5c697425dc8a9775f73e9dadd34b40b5522024ad8302657a21d7a0d4e33bc87511037fc572bdab0149412f44775a4634c390f945c929d8fc54a9e6a046db6dcca9115967155ddfbdc07055873004cf1b6b874f4be0307233b6d63256a0b63a120f8d2d9d840180fb59a296f4f7b7096e19b6d7741072ac8164f6554788a061e904fcc749284022c01bad2405f6e4d62741ffde990f8b1597c98ea78d62f8a0dbc1f791c00ddfc40afe22d45d180dae2d99cf9b7ad8cf9939b7601528c1ea20808080b901b1f901ae20b901aaf901a70183074cdcbf89df89b94fab46e002bbf0b4509813474841e0716e6730136f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000d6faa9dfa475d7615f8b776dbc2bc182e2526547a0000000000000000000000000000000000000000000084595161401484a000000"),
			header_hash: H256::from_str("b49af42826f514553a91bd976c598e03f24516c9478af1162560f47a583b55f7").unwrap(),
		};
		let mmr_proof = MMRProof {
			member_leaf_index: 10499402,
			last_leaf_index: 10499501,
			proof: vec![
				H256::from_str("36f3d834cbe12a5a20b063c432b88f5506bdce03b93fa3aa035a5d82fd50177c").unwrap(),
				H256::from_str("b10a06336827182396eabf37e835e57252cee94fd4b493787a76a9869026a65e").unwrap(),
				H256::from_str("e9296a032921f8f72f5f0926c697e8b4e6781553edd567ec3d94e2ad4e7ebc02").unwrap(),
				H256::from_str("52cb40263a1482dc80e46b8f930501d2bafc84fa24cce0ecd47b21dc60e30dfd").unwrap(),
				H256::from_str("960db9f55d08477ba91d005b3ff74008c24f62edec31af401c5ca205d12312b8").unwrap(),
				H256::from_str("4b9e2b61bbcd8215ef5435c0a901d10c902161cb2cc58b4b6d1960b721c0f463").unwrap(),
				H256::from_str("451f5cc007407deeb20bc341cdec27d469b2d85a54adbb12881a431325970ebe").unwrap(),
				H256::from_str("a3485a8c66ec17fd717ea4a43e1a6c8dcdaa084fe66868d1c35a9247258aff38").unwrap(),
				H256::from_str("b7df21b67493270979deae26b834ecf61de8e062db3dd11ec580df3748987f48").unwrap(),
				H256::from_str("4ee36b22ce0b59b90beac005639c8e6386875a4a4d1292489cd8e38061c65cbc").unwrap(),
				H256::from_str("ada6eaea4760ed599acd1e36de0638b2d47142a5f237a2f8bc7e947bda4d468f").unwrap(),
				H256::from_str("f05676af0ba496e869a408b45f197c15a33239663ba31129c9f1c782000df825").unwrap(),
				H256::from_str("ec8977867c578d950361969cadc43ab559063e8fd9614259a949b8c36714478b").unwrap(),
				H256::from_str("5398f3342a0239e3c85f2921cba88e137947cdd0211fd5be5e88b581f635ab72").unwrap(),
			],
		};
		let mut xxx: vec::Vec<u8> = (header, receipt_proof, mmr_proof).encode();
		let proof_thing: EthereumReceiptProofThing<T>  = Decode::decode(&mut xxx.as_slice()).unwrap();
	}: _(RawOrigin::Root, proof_thing)

	set_mapping_factory_address {
		let address = hex_into_unchecked("0000000000000000000000000000000000000001");
	}: _(RawOrigin::Root, address)

	set_ethereum_backing_address {
		let address = hex_into_unchecked("0000000000000000000000000000000000000001");
	}: _(RawOrigin::Root, address)
}
